<?php
/*
Copyright (C) 2011 Matthieu Di Blasio <matthieu.diblasio@gmail.com>

This file is part of Zen Form Maker.

Zen Form Maker is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Zen Form Maker is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with Zen Form Maker.  If not, see <http://www.gnu.org/licenses/>.
*/
class Application_Model_FormElement
{    
    // This property will contain the Zend_Form_Element generated
    private $_element; 
    
    // Php code used to generate the element
    private $_phpCode;
    
    // Errors that happened while building the element
    private $_errors = array();
    
    // The element's properties
    private $_id = '-1';
    private $_name = 'Undefined_name';
    private $_type = 'UndefinedType';
    private $_order = '0';
    private $_required = 'false';
    private $_allowEmpty = 'true';
    private $_label = '';
    private $_value = '';
    private $_description = '';
    private $_attribs = array();
    private $_filters = array();
    private $_validators = array();
    private $_decorators = array();    
    private $_multi = array();
    private $_spec;
    
    
    /**
     * 
     * Initialize the element with default values or values from an xml string.
     * @param string $xml : report to createFromXml
     * @param bool $completeBuild : report to createFromXml
     */
    public function __construct($xml = '', $completeBuild = false)
    {
        if (!empty($xml))
        {
            $this->createFromXml($xml, $completeBuild);
        }
        else
        {
            $this->initProperties();
        }
    }
    
    /*
     * Getters
     */
    
    
    /**
     * 
     * This method will return the xhtml of the loaded element, once generated.
     * @return string The html view
     */
    public function getRenderedView($view)
    {
        // Throw an error if the element is not valid
        if ($this->_element instanceof Zend_Form_Element)
        {
            ob_start();
                if ($this->_element->getType() == 'Zend_Form_Element_Hidden')
                   echo '<i>this is an hidden field you won\'t see it</i>';
                
                if ($this->_element->getType() == 'Zend_Form_Element_Hash')
                    echo '<i>this is an hash field you won\'t see it</i>';
            
                echo $this->_element->render($view);
            $htmlView = ob_get_clean();
            
            return $htmlView; 
        }
        else
        {
            throw new Zend_Exception('The element is not initialized or not a child of Zend_Form_Element and can\'t be rendered');
        }
    }
    
    /**
     * 
     * This method will return the element's id
     * @return int id
     */
    public function getElementId()
    {
        return $this->_id;
    }
    
    public function getElement()
    {
        return $this->_element;
    }
    
    public function getPhpCode()
    {
        return $this->_phpCode;
    }
    
    public function getErrors()
    {
        return $this->_errors;
    }
    
    /**
     * 
     * Add an error to the array
     * @param string $msg : Main message
     * @param string $extraError : extra informations for the "more" link
     */
    private function addError($msg, $extraError = '')
    {
        $error = array();
        
        $error['msg'] = $msg;
        if (!empty($extraError))
            $error['extra'] = nl2br($extraError);
            
        $this->_errors[$this->_name . '(' . $this->_id . ')'][] = $error;        
    }
    
    /**
     * 
     * This method will generate the php code to generate the form element given in parameter as xml
     * @param string $xml
     * @param bool $completeBuild : define if the php code should render the validators and filters too.
     * @return Zend_Form_Element The element generated from xml
     */
    public function createFromXml($xml, $completeBuild)
    {
        // Load the xml datas in this object's properties
        $this->loadFromXml($xml);
        
        // Get the code to build the element
        $this->_phpCode = $this->_generatePhpCode($completeBuild);
        
        // Get the element generated by eval
        $this->_element = eval($this->_phpCode);
        
        // If eval had a compilation error, throw it
        if($this->_element === false)
        {
            $error = 'An error occured white generating the view from the php code.<br/>' . PHP_EOL;
            $error .= 'Trapped from FormElementManager->createViewFromXml.<br/>' . PHP_EOL;
            $error .= 'The php code trying to be evaluated was : <br/>' . PHP_EOL;
            $errorReason = error_get_last();
            $error .= Zend_Debug::dump($errorReason, 'reason form eval : <br/>', false);
            $error .= '<pre>' . $this->_phpCode . '</pre>';
            echo $error;
        }
        
        
        return $this->_element;
    }
    
   
    /**
     * 
     * Initialize the properties to their default values
     */
    public function initProperties()
    {
        $this->_id = '-1';
        $this->_name = 'no_name_found_in_user_entry';
        $this->_type = '';
        $this->_order = '';
        $this->_required = '';
        $this->_allowEmpty = '';
        $this->_label = '';
        $this->_value = '';
        $this->_description = '';
        $this->_attribs = array();
        $this->_filters = array();
        $this->_validators = array();
        $this->_decorators = array();
        
        $this->_multi = array();
        $this->_spec; 
    }

    /**
     * 
     * This method takes an xml string, read his content and load it in this object's properties
     * @param string $xml
     */
    public function loadFromXml($xml)
    {
        // Make a sxe element with the xml datas
        $elementData = new SimpleXMLElement($xml);
        
        // Load attributes into this objet
        $this->_id = (string)$elementData['id'];
        $this->_id = (int)$this->_id;
        
        $this->_type = addslashes((string)$elementData['type']);
        $this->_name = addslashes((string)$elementData->name);
        $this->_order = addslashes((string)$elementData->order);
        $this->_required = addslashes((string)$elementData->required);
        $this->_allowEmpty = addslashes((string)$elementData->allowEmpty);
        $this->_label = addslashes((string)$elementData->label);
        $this->_value = addslashes((string)$elementData->value);
        $this->_description = addslashes((string)$elementData->description);
        
        // Read the attribs
        if ($elementData->attribs->count() > 0)
        {
            foreach($elementData->attribs->children() as $attrib)
            {
                $name = addslashes((string)$attrib->attributes()->name);
                $this->_attribs[$name] = addslashes((string)$attrib);
            }
        }
        
        // Read multi attributs
        if ($elementData->multioptions->count() > 0)
        {
            foreach($elementData->multioptions->children() as $option)
            {
                /*
                $value = (string)$option->attributes()->value;
                $this->_multi[$value] = (string)$option;
                */
                
                $id = (int)$option->attributes()->id;
                $this->_multi[$id] = array('text' => addslashes((string)$option->text), 
                                            'value' => addslashes((string)$option->value), 
                                            'checked' => addslashes((string)$option->checked));
            }
            
        }
        
        // Read validators
        if ($elementData->validators->count() > 0)
        {
            foreach($elementData->validators->children() as $validator)
            {
                $name = addslashes((string)$validator->name);
                $bcof = addslashes((string)$validator->bcof);
                $constructor =(string)$validator->constructor;
                $errorMessage = addslashes((string)$validator->errorMessage);
                
                $this->_validators[$name] = array(
                                            'name' => $name,
                                            'bcof' =>  $bcof,
                                            'constructor' => $constructor,
                                            'errorMessage' => $errorMessage);
                
            }
        }
        
        
        // Read filters
        if ($elementData->filters->count() > 0)
        {
            foreach($elementData->filters->children() as $filter)
            {
                $name = addslashes((string)$filter->name);
                $constructor = (string)$filter->constructor;
                
                $this->_filters[$name] = array('name' => $name,
                                            	'constructor' => $constructor,);
            }
        }
        
        if ($elementData->decorators->count() > 0)
        {
        
            foreach($elementData->decorators->children() as $decorator)
            {    
                
                $id = addslashes((string)$decorator->id);
                $name = addslashes((string)$decorator->name);
                $options = (string)$decorator->options;
                
                $this->_decorators[$id] = array('id' => $id,
                                                'name' => $name,
                                            	'options' => $options,);
            }           
        }
        
        //
        if ($elementData->spec->count() > 0)
        {
            switch($this->_type)
            {
                case 'captcha':
                    $this->_spec->adapter = addslashes((string)$elementData->spec->adapter);
                    $this->_spec->wordLen = addslashes((string)$elementData->spec->wordLen);
                    $this->_spec->timeout = addslashes((string)$elementData->spec->timeout);
                    $this->_spec->useNumbers = addslashes((string)$elementData->spec->useNumbers);
                    $this->_spec->sessionClass = addslashes((string)$elementData->spec->sessionClass);
                    $this->_spec->session= addslashes((string)$elementData->spec->session);
                    
                    if (strtolower($this->_spec->adapter) == 'image')
                    {
                        $this->_spec->expiration = addslashes((string)$elementData->spec->expiration);
                        $this->_spec->gcFreq = addslashes((string)$elementData->spec->gcFreq);
                        $this->_spec->font = addslashes((string)$elementData->spec->font);
                        $this->_spec->fontSize = addslashes((string)$elementData->spec->fontSize);
                        $this->_spec->height = addslashes((string)$elementData->spec->height);
                        $this->_spec->width = addslashes((string)$elementData->spec->width);
                        $this->_spec->imgDir = addslashes((string)$elementData->spec->imgDir);
                        $this->_spec->imgUrl = addslashes((string)$elementData->spec->imgUrl);
                        $this->_spec->suffix = addslashes((string)$elementData->spec->suffix);
                        $this->_spec->dotNoiseLevel = addslashes((string)$elementData->spec->dotNoiseLevel);  
                        $this->_spec->lineNoiseLevel = addslashes((string)$elementData->spec->lineNoiseLevel);                           
                    }
                    
                    if (strtolower($this->_spec->adapter) == 'recaptcha')
                    {
                        $this->_spec->privKey = addslashes((string)$elementData->spec->privKey);
                        $this->_spec->pubKey = addslashes((string)$elementData->spec->pubKey);
                        $this->_spec->service = addslashes((string)$elementData->spec->service);                        
                    }
                    
                    break;  
                              
                case 'file':
                    $this->_spec->destination = addslashes((string)$elementData->spec->destination);
                    $this->_spec->valueDisabled = addslashes((string)$elementData->spec->valueDisabled);
                    $this->_spec->multiFile = addslashes((string)$elementData->spec->multiFile);
                    break;
                            
                case 'hash':
                    $this->_spec->salt = addslashes((string)$elementData->spec->salt);
                    $this->_spec->timeout = addslashes((string)$elementData->spec->timeout);
                    $this->_spec->session = addslashes((string)$elementData->spec->session);
                    break;
                            
                case 'image':
                    $this->_spec->src = addslashes((string)$elementData->spec->src);
                    $this->_spec->imgValue = addslashes((string)$elementData->spec->imgValue);
                    break;                     
                    
                default:
                    // Do nothing
                    break;
            } // end switch   

        } // en empty spec ?
        
    }
    
    /*
     * Private methods
     */
    
    /**
     * 
     * This method generate the php code to generate the element defined by this objet's properties
     * @param bool $completeBuild : Build the element view or the element with validators, filters, etc
     * @return string phpCode
     */
    private function _generatePhpCode($completeBuild)
    {
        $oldErrorLvl = error_reporting(E_ALL);
        
        // Build the line creating the object and settings the special options when needed
        $minimumLine = $this->_buildPhpCodeHeader();
        $phpCode = $minimumLine;
        
        
        // Build the common data to all the elements
        $commonPropertiesCode = $this->_buildCommonProperties();
        try 
        {
            ob_start();
            eval ($minimumLine . $commonPropertiesCode);
            if (($content = ob_get_clean()) != '') 
                throw new Zend_Exception('Syntax error somewhere when we eval the common properties' . PHP_EOL 
                                         .'<b>Error returned</b> : ' . $content . PHP_EOL 
                                         .'<b>Code evaluated</b> :' . PHP_EOL 
                                         . $minimumLine . $commonPropertiesCode);
            $phpCode .= $commonPropertiesCode;
        }
        catch (Zend_Exception $e) 
        {
            $this->addError('Error in the common datas (label, order, description, required, allowEmpty, value). Default values used.', $e->getMessage());
            $phpCode .= $this->_buildCommonProperties(true);
        }
        
        // Manage multiple options to set
        $multiOptionsCode = $this->_buildMultiOptions();
        try 
        {
            ob_start();
            eval ($minimumLine . $multiOptionsCode);
            if (($content = ob_get_clean()) != '') throw new Zend_Exception('Syntax error somewhere when we eval the multioptions' . PHP_EOL 
                                                                           .'<b>Error returned</b> : ' . $content  . PHP_EOL 
                                                                           .'<b>Code evaluated</b> :' . PHP_EOL 
                                                                           . $minimumLine . $multiOptionsCode);
            $phpCode .= $multiOptionsCode;
        }
        catch (Zend_Exception $e) 
        {
            $this->addError('Error in the multioptions. Default options are used.', $e->getMessage());
            $this->_buildMultiOptions(true);
        }
        
        // Manage decorators
        $decoratorsCode = $this->_buildDecorators();
        try 
        {
            ob_start();
            eval ($minimumLine . $decoratorsCode);
            if (($content = ob_get_clean()) != '') 
                throw new Zend_Exception('Syntax error somewhere when we eval the decorators.' . PHP_EOL 
                                        .'<b>Error returned</b> : ' . $content . PHP_EOL 
                                        .'<b>Code evaluated</b> :' . PHP_EOL 
                                        . $minimumLine . $decoratorsCode);
                
            $phpCode .= $decoratorsCode;
        }
        catch (Zend_Exception $e) 
        {
            $this->addError('Error in the decorators. No decorators set, default ones are used.', $e->getMessage());   
        }
        
        // Manage Attribs
        $attribsCode = $this->_buildAttribs();
        try 
        {
            ob_start();
            eval ($minimumLine . $attribsCode);
            if (($content = ob_get_clean()) != '') 
                throw new Zend_Exception('Syntax error somewhere when we eval the attributes' . PHP_EOL 
                                        .'<b>Error returned</b> : ' . $content . PHP_EOL 
                                        .'<b>Code evaluated</b> :' . PHP_EOL 
                                        . $minimumLine . $decoratorsCode);
            $phpCode .= $attribsCode;
        }
        catch (Zend_Exception $e) 
        {
            $this->addError('Error in the element\'s attribs. No custom attribute set.');
        }
        
        
        // If we're building the form, not just rendering
        if ($completeBuild)
        {          
            // Manage the validators  
            $validatorsCode = $this->_buildValidators();
            try 
            {
                ob_start();
                eval ($minimumLine . $validatorsCode);
                if (($content = ob_get_clean()) != '') 
                    throw new Zend_Exception('Syntax error somewhere when we eval the validators' . PHP_EOL 
                                            .'<b>Error returned</b> : ' . $content . PHP_EOL 
                                            .'<b>Code evaluated</b> :' . PHP_EOL 
                                            . $minimumLine . $decoratorsCode);
                $phpCode .= $validatorsCode;
            }
            catch (Zend_Exception $e) 
            {
                $this->addError('Error in the validators. No validator set.', $e->getMessage());
            }
            
            // Manage the filters
            $filtersCode = $this->_buildFilters();
            try 
            {
                ob_start();
                eval ($minimumLine . $filtersCode);
                if (($content = ob_get_clean()) != '')
                 throw new Zend_Exception('Syntax error somewhere when we eval the filters' . PHP_EOL 
                                         .'<b>Error returned :</b>' . PHP_EOL . $content
                                         .'<b><b>Code evaluated</b></b> :' . PHP_EOL 
                                         . $minimumLine . $decoratorsCode);
                $phpCode .= $filtersCode;
            }
            catch (Zend_Exception $e) 
            {
                $this->addError('Error in the filters. No filter set.', $e->getMessage());
            }
        }
        
        // To get the element created in eval outside
        $phpCode .= PHP_EOL . 'return $element;';
        error_reporting($oldErrorLvl);
        return $phpCode;
    }

    /**
     * 
     * Build the header code for an element.
     */
    private function _buildPhpCodeHeader()
    {
        // Manage special elements
        $options = $this->_buildElementOptions();
        
        if (!empty($options))
        {           
            $phpCode = '$element = new Zend_Form_Element_' . ucfirst($this->_type) . '(\'' . $this->_name . '\', ' . $options . ');' . PHP_EOL;

            // Is there an error in the options built ? (User's entry invalid ?)
            try 
            {                
                eval($phpCode);
            }
            // So rebuild the options with the default values for this kind of things
            catch (Zend_Exception $e)
            {
                $options = $this->_buildElementOptions(true);
                $phpCode = '$element = new Zend_Form_Element_' . ucfirst($this->_type) . '(\'' . $this->_name . '\', ' . $options . ');' . PHP_EOL;            
            } 
        }
        // Load options for special type of element which needs it
        else
        {
            $phpCode = '$element = new Zend_Form_Element_' . ucfirst($this->_type) . '(\'' . $this->_name . '\');' . PHP_EOL;
        }
        
        return $phpCode;
    }
    
    /**
     * 
     * Build the code for the common properties of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildCommonProperties($setDefault = false)
    {
        $phpCode = '$element';
        
        if ($setDefault)
        {
            $phpCode .=  PHP_EOL . '->setLabel(\'Default label : \')';
            
            return $phpCode;
        }
        else
        {
            if (!empty($this->_label))
                $phpCode .=  PHP_EOL . '->setLabel(\'' . $this->_label . '\')';
                
            if (!empty($this->_order))
                $phpCode .=  PHP_EOL . '->setOrder(' . $this->_order . ')';
            
            if (!empty($this->_description))
                $phpCode .=  PHP_EOL . '->setDescription(\'' . $this->_description . '\')';
            
            if (!empty($this->_required))
                $phpCode .=  PHP_EOL . '->setRequired(' . $this->_required . ')';
            
            if (!empty($this->_allowEmpty))
                $phpCode .=  PHP_EOL . '->setAllowEmpty(' . $this->_allowEmpty . ')';
            
            if (!empty($this->_value))
                $phpCode .=  PHP_EOL . '->setValue(\'' . $this->_value . '\')';
            
            $phpCode .=  ';';       
    
            // Don't return the code if nothing is set
            if ($phpCode == '$element;')
                return '';
            else        
                return $phpCode;
        }
    }

    
    /**
     * 
     * Build the code for the multioption part of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildMultiOptions($setDefault = false)
    {
        $phpCode = '';
        if (!empty($this->_multi))
        {
            $phpCode .= PHP_EOL;
            
            $checkedOnes = '$checkedOptions = array(';
            
            $multiCode = '$multioptions = array(';
            
            // If we've decided to apply default values
            if ($setDefault)
            {
                $source = array();
                $source[] = array('value' => 'Option 1',
                                    'text' => 'Option 1',
                                    'checked' => 'false');
                $source[] = array('value' => 'Option 2',
                                    'text' => 'Option 2',
                                    'checked' => 'false');
                $source[] = array('value' => 'Option 3',
                                    'text' => 'Option 3',
                                    'checked' => 'false');
            }
            else
                $source = $this->_multi;
            
            foreach($source as $id => $datas)
            {
                $multiCode .=  '\'' . $datas['value'] . '\' => \'' . $datas['text'] . '\',';   
                   
                if ($datas['checked'] == 'true')
                    $checkedOnes .= '\'' . $datas['value'] . '\',';
            }
            
            $multiCode = trim($multiCode, ',');
            $multiCode .= ');';
            
            $checkedOnes = trim($checkedOnes, ',');
            $checkedOnes .= ');';
            
            
            $phpCode .= $checkedOnes . PHP_EOL;
            $phpCode .= $multiCode . PHP_EOL;
            $phpCode .= '$element->addMultiOptions($multioptions);' . PHP_EOL;
            
            if (!empty($checkedOnes))
            {
                $phpCode .= '$element->setValue($checkedOptions);' . PHP_EOL;
            }
        }    
        return $phpCode;    
    }
    
    
    /**
     * 
     * Build the code for the decorators of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildDecorators($setDefault = false)
    {
        $phpCode = '';
        if (!empty($this->_decorators) && !$setDefault)
        {
            $phpCode .= PHP_EOL . PHP_EOL;
            $phpCode .= '// Set decorators' . PHP_EOL;
            
            $decoratorsCode = '$decorators = array();' . PHP_EOL;
            foreach($this->_decorators as $id => $datas)
            {
                // Open array
                $decoratorsCode .= '$decorators[] = array(' . PHP_EOL;
                
                // Put the classname part in it
                $decoratorsCode .= 'array(\'' . $datas['name'] . $datas['id'] . '\' => \'' . $datas['name'] . '\')';
                
                // Then the options part
                if (!empty($datas['options']))
                    $decoratorsCode .=  ', ' . $datas['options'] . PHP_EOL;   
                    
                // Close the array 
                $decoratorsCode .= ' );' . PHP_EOL;
            }
            
            
            $phpCode .= $decoratorsCode . PHP_EOL;
            
            $phpCode .= '$element->setDecorators($decorators);' . PHP_EOL;
        }
        return $phpCode;
    }
    
    
    /**
     * 
     * Build the code for the attributes of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildAttribs()
    {
        $phpCode = '';
        if (!empty($this->_attribs))
        {
            $phpCode .= PHP_EOL . PHP_EOL;
            $phpCode .= '// Set attribs' . PHP_EOL;
            
            $attribs = 'array(';
            foreach($this->_attribs as $name => $value)
            {
                $attribs .= '\'' . $name . '\'=> \'' . $value . '\',' . PHP_EOL;
            }
            
            $attribs = trim($attribs, ','.PHP_EOL);
            $attribs .= ');';
            
            $phpCode .= '$attribs = ' . $attribs . PHP_EOL;
        
            $phpCode .= '$element->setAttribs($attribs);' . PHP_EOL;            
        }    
        return $phpCode;        
    }
    
    /**
     * 
     * Build the code for the validators of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildValidators()
    {
        $phpCode = '';
        if (!empty($this->_validators))        
        {  
            $phpCode .= PHP_EOL . PHP_EOL;
            $phpCode .= '// Set validators' . PHP_EOL;
        
            // Manager validators things
            foreach($this->_validators as $className => $validator)
            {
                $validatorShortname = str_replace('Zend_Validate_', '', $className);
                
                $phpCode .= '$validator = new ' . $className . '(' . $validator['constructor'] . ');' . PHP_EOL;
                $phpCode .= '$element->addValidator($validator, ' . $validator['bcof'] . ');' . PHP_EOL;
                if (!empty($validator['errorMessage']))
                {
                    $phpCode .= '$element->getValidator(\'' . $validatorShortname . '\')->setMessage(\'' . $validator['errorMessage'] . '\');' . PHP_EOL;
                }
            }
        }
        return $phpCode;
    }
    
    /**
     * 
     * Build the code for the filters of an element
     * @param bool $setDefault : Do we set the default properties for this element ?
     */
    private function _buildFilters()
    {
        $phpCode = '';
    
        if (!empty($this->_filters))          
        {  
            $phpCode .= PHP_EOL . PHP_EOL;
            $phpCode .= '// Set filters' . PHP_EOL;
                       
            // Manager validators things
            foreach($this->_filters as $className => $filter)
            {
                $phpCode .= '$filter = new ' . $className . '(' . $filter['constructor'] . ');' . PHP_EOL;
                $phpCode .= '$element->addFilter($filter);' . PHP_EOL;
                $phpCode .= PHP_EOL;
            }
        }
        return $phpCode;
    }
    
    
    /**
     * 
     * This method will build a string to specify the options of a form element.
     * @param bool $setDefault : If true, the option will be built with default values
     * @param bool $completBuild : If false, some options won't be loaded because they are not needed for render purpose
     * @return string $options
     */
    private function _buildElementOptions($setDefault = false, $completBuild = false)
    {
        $config = Zend_Registry::get('config');
        $options = '';
        switch($this->_type)
        {
            case 'captcha':
                $defaultFontPath = $config->zfm->formElement->captcha->defaultFontPath;
                $defaultFontSize = $config->zfm->formElement->captcha->defaultFontSize;
                $defaultImgDir = $config->zfm->formElement->captcha->defaultImgDir;
                
                if (!empty($this->_spec))
                {
                    $options = 'array(\'captcha\' => array(';
                    $options .= (!empty($this->_spec->adapter))      ? '\'captcha\' => \'' . $this->_spec->adapter . '\','           : '';
                    $options .= (!empty($this->_spec->wordLen))      ? '\'wordLen\' => \'' . $this->_spec->wordLen . '\','         	 : '';
                    $options .= (!empty($this->_spec->useNumbers))   ? '\'useNumbers\' => \'' . $this->_spec->useNumbers . '\','     : '';
                    
                    if ($completBuild)
                    {
                        $options .= (!empty($this->_spec->timeout))      ? '\'timeout\' => \'' . $this->_spec->timeout . '\','           : '';
                        $options .= (!empty($this->_spec->sessionClass)) ? '\'sessionClass\' => \'' . $this->_spec->sessionClass . '\',' : '';
                        $options .= (!empty($this->_spec->session))      ? '\'session\' => \'' . $this->_spec->session . '\','           : '';
                    }
                    
                    if ($this->_spec->adapter == 'Image')
                    {
                        $optionsImg = '';                        
                        $optionsImg .= (!empty($this->_spec->font))           ? '\'font\' => \'' . $this->_spec->font . '\','                   : '';
                        $optionsImg .= (!empty($this->_spec->fontSize))       ? '\'fontSize\' => \'' . $this->_spec->fontSize . '\','           : '';
                        $optionsImg .= (!empty($this->_spec->height))         ? '\'height\' => \'' . $this->_spec->height . '\','               : '';
                        $optionsImg .= (!empty($this->_spec->width))          ? '\'width\' => \'' . $this->_spec->width . '\','                 : '';
                        $optionsImg .= (!empty($this->_spec->imgDir))         ? '\'imgDir\' => \'' . $this->_spec->imgDir . '\','               : '';
                        $optionsImg .= (!empty($this->_spec->imgUrl))         ? '\'imgUrl\' => \'' . $this->_spec->imgUrl . '\','               : '';
                        $optionsImg .= (!empty($this->_spec->suffix))         ? '\'suffix\' => \'' . $this->_spec->suffix . '\','               : '';
                        $optionsImg .= (!empty($this->_spec->dotNoiseLevel))  ? '\'dotNoiseLevel\' => \'' . $this->_spec->dotNoiseLevel . '\',' : '';
                        $optionsImg .= (!empty($this->_spec->lineNoiseLevel))  ? '\'lineNoiseLevel\' => \'' . $this->_spec->lineNoiseLevel . '\',' : '';
                        
                        if ($completBuild)
                        {
                            $optionsImg .= (!empty($this->_spec->expiration))     ? '\'expiration\' => \'' . $this->_spec->expiration . '\','       : '';
                            $optionsImg .= (!empty($this->_spec->gcFreq))         ? '\'gcFreq\' => \'' . $this->_spec->gcFreq . '\','               : '';
                        }
                        
                        // If there is not option, OR we call the method with an order to set default OR there is no font/imgDir specified 
                        if (empty($optionsImg) || $setDefault || empty($this->_spec->font) || empty($this->_spec->imgDir))
                        {
                            $optionsImg .= '\'font\' => \'' . $defaultFontPath . '\',';
                            $optionsImg .= '\'imgDir\' => \'' . $defaultImgDir . '\',';
                            $this->addError('Default values has been used for the captcha image (font and imgDir).');
                        }
                        
                        $options .= $optionsImg;
                    }
                    
                    if ($this->_spec->adapter == 'ReCaptcha')
                    {
                        $optionsRe = '';
                        $optionsRe .= (!empty($this->_spec->privKey))  ? '\'privKey\' => \'' . $this->_spec->privKey . '\',' : '';
                        $optionsRe .= (!empty($this->_spec->pubKey))   ? '\'pubKey\' => \'' . $this->_spec->pubKey . '\','   : '';
                        $optionsRe .= (!empty($this->_spec->service))  ? '\'service\' => \'' . $this->_spec->service . '\',' : '';
                        
                        
                        // If there is not option, OR we call the method with an order to set default OR there is no pub/priv key specified
                        if (empty($optionsRe) || $setDefault || empty($this->_spec->pubKey) || empty($this->_spec->privKey))
                        {
                            $optionsRe .=  '\'privKey\' => \'nokey\',';
                            $optionsRe .=  '\'pubKey\' => \'nokey\',';
                            $this->addError('Default values has been used for the re-captcha (public and private keys).');
                        }   
                        
                        $options .= $optionsRe;
                    }
                    
                
                    if ($options != 'array(\'captcha\' => array(' && !$setDefault)
                    {
                        $options[strlen($options)-1] = ')';
                        $options .= ')';
                    }
                    else
                    {
                        $options = 'array(\'wordLen\' => 6, \'timeout\' => 300, \'captcha\' => \'dumb\')';
                        $this->addError('Default values has been used for the captcha type, lenght and timeout');
                    }
                }
                else
                {
                    $options = 'array(\'wordLen\' => 6, \'timeout\' => 300, \'captcha\' => \'dumb\')';
                    $this->addError('Default values has been used for the captcha type, lenght and timeout');
                }
                break;  
                          
            case 'file':
                $defaultDestination = $config->zfm->formElement->defaultUploadPath;
                if (!empty($this->_spec))
                {
                    $options = 'array(';
                    
                    $options .= (!empty($this->_spec->multiFile))     ? '\'multiFile\' => \'' . $this->_spec->multiFile . '\','       : '';                    
                    $options .= (!empty($this->_spec->destination))   ? '\'destination\' => \'' . $this->_spec->destination . '\','   : '';
                    
                    if ($completBuild)
                    {
                        $options .= (!empty($this->_spec->valueDisabled)) ? '\'valueDisabled\' => ' . $this->_spec->valueDisabled . ','   : '';
                    }
                    
                    
                    if ($options != 'array(' && !$setDefault)
                    {
                        $options[strlen($options)-1] = ')';
                    }
                    else
                    {
                        $options = 'array(\'destination\' => \'' . $defaultDestination . '\')';
                        $this->addError('Default values has been used for the file upload destination.');
                    }
                }
                else
                {
                    $options = 'array(\'destination\' => \'' . $defaultDestination . '\')';
                    $this->addError('Default values has been used for the file upload destination.');
                }
                break;
                        
            case 'hash':
                if (!empty($this->_spec))
                {
                    $options = 'array(';
                    
                    $options .= (!empty($this->_spec->salt))     ? '\'salt\' => \'' . $this->_spec->salt . '\','     : '';
                    
                    if ($completBuild)
                    {
                        $options .= (!empty($this->_spec->timeout))  ? '\'timeout\' => ' . $this->_spec->timeout . ','   : '';
                        $options .= (!empty($this->_spec->session))  ? '\'session\' => ' . $this->_spec->session . ','   : '';
                    }
                
                    if ($options != 'array(' && !$setDefault)
                    {
                        $options[strlen($options)-1] = ')';
                    }
                    else
                    {
                        $options = 'array(\'timeout\' => \'300\', \'salt\' => \'' . $this->_genRandomStr(32) . '\')';
                        $this->addError('Default values has been used for the hash timeout and salt.');
                    }
                }
                else
                {
                    $options = 'array(\'timeout\' => \'300\', \'salt\' => \'' . $this->_genRandomStr(32) . '\')';
                    $this->addError('Default values has been used for the hash timeout and salt.');
                }
                break;
                        
            case 'image':
                $defaultImage = $config->zfm->formElement->defaultImagePath;
                if (!empty($this->_spec))
                {
                    $options = 'array(';
                    
                    $options .= (!empty($this->_spec->src))      ? '\'image\' => \'' . $this->_spec->src . '\','         : '';
                    $options .= (!empty($this->_spec->imgValue)) ? '\'imageValue\' => \'' . $this->_spec->imgValue . '\','   : '';
                
                    if ($options != 'array(' && !$setDefault)
                    {
                        $options[strlen($options)-1] = ')';
                    }
                    else
                    {
                        $options .= 'array(\'image\' => \'' . $defaultImage . '\', \'imageValue\' => \'defaultValue\')';
                        $this->addError('Default value has been used for the image\'s input image.');
                    }
                }
                else
                {
                    $options .= 'array(\'image\' => \'' . $defaultImage . '\', \'imageValue\' => \'defaultValue\')';
                    $this->addError('Default value has been used for the image\'s input image.');
                }
                break;                     
                
            default:
                // Do nothing
                break;
        }
        
        return $options;
    }
    
    /**
     * 
     * Generate a random string
     * @param int $size : Size of the string to generate
     * @return string The generated string
     */
    private function _genRandomStr($size)
    {
        $chars = str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+*%&/()=!$[]-.,;:_@|?');
        
        $rdm = '';
        for ($i = 0; $i < $size; $i++)
        {            
            $rdm .= $chars[rand(0, strlen($chars)-1)];
        }
            
        return $rdm;
    }
}